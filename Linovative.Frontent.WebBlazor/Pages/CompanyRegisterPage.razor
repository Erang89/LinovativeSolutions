@page "/register/new/company"
@layout UnAuthorizedLayout
@using System.Text.RegularExpressions
@inherits LinovativePageBase


<MudPaper Class="d-flex justify-center flex-grow-1 gap-4" Elevation="0">
    <div Style="min-width: 450px; max-width: 600px">
        <MudText Typo="Typo.h4">@Lang("Title")</MudText>

        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" />
            <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                           />
            <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                          InputType="InputType.Password"
                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                          RequiredError="Password is required!" />
            <MudTextField T="string"
                          Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                          Validation="@(new Func<string, string?>(PasswordMatch))" />
            <div class="d-flex">
                <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
                    <MudRadio Value="@("Personal")">Personal</MudRadio>
                    <MudRadio Value="@("Professional")">Professional</MudRadio>
                </MudRadioGroup>
            </div>
            <div class="d-flex align-center justify-space-between">
                <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree!" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
            </div>
        </MudForm>
    </div>
</MudPaper>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1 = default!;
    MudForm form = default!;

    protected override string LocalizerKey => nameof(CompanyRegisterPage);

    private IEnumerable<string> PasswordStrength(string pw)
    {

        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }

        if (pw.Length < 8)
            yield return "Password must be at least of length 8";

        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";

        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";

        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string? PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";

        return null;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
}