@page "/register/new/company"
@layout UnAuthorizedLayout
@using System.Text.RegularExpressions
@using LinoVative.Shared.Dto
@inherits LinovativePageBase


<PageTitle>@Lang("Title")</PageTitle>


<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">

    <div style="max-width: 900px; margin: auto;">

        <MudGrid Spacing="20">

            <MudItem xs="12" lg="12">
                <MudText Align="Align.Center" Typo="Typo.h4">@Lang("Title")</MudText>
            </MudItem>



            <MudItem xs="12" lg="6">

                <MudText Typo="Typo.h6">@Lang("SubTitle.CompanyDetail"):</MudText>
                <LinovativeGap />

                <LinovativeInputText IsRequired=true
                                     @bind-Value="@dto.Name"
                                     RequiredMessage="@Required("Name")"
                                     Label="@Label("Name")" />
                <LinovativeGap />

                <LinovativeInputText IsRequired=true                    
                                     RequiredMessage="@Required("Address")"
                                     Label="@Label("Address")" />
                <LinovativeGap />


                @* <CountryDropdown /> *@
                <LinovativeInputText IsRequired=true
                                     RequiredMessage="@Required("Country")"
                                     Label="@Label("Country")" />
                <LinovativeGap />

                <LinovativeInputText IsRequired=true
                                     RequiredMessage="@Required("TimeZone")"
                                     Label="@Label("TimeZone")" />
                <LinovativeGap />

                <LinovativeInputText IsRequired=true
                                     RequiredMessage="@Required("Currency")"
                                     Label="@Label("Currency")" />
            </MudItem>




            <MudItem xs="12" lg="6">

                <MudText Typo="Typo.h6">@Lang("SubTitle.UserDetail"):</MudText>
                <LinovativeGap />

                <LinovativeInputText IsRequired=true
                                     RequiredMessage="@Required("NikeName")"
                                     Label="@Label("NikeName")" />
                <LinovativeGap />


                <LinovativeInputText IsRequired=true
                                     RequiredMessage="@Required("EmailAddress")"
                                     Label="@Label("EmailAddress")" />
                <LinovativeGap />


                <LinovativeInputText IsRequired=true
                                     RequiredMessage="@Required("Password")"
                                     Label="@Label("Password")" />
                <LinovativeGap />

                <LinovativeInputText IsRequired=true
                                     RequiredMessage="@Required("ConfirmPassword")"
                                     Label="@Label("ConfirmPassword")" />
                <LinovativeGap />

            </MudItem>


            <MudItem xs="12" lg="12">
                <LinovativeButton Size="LinoSize.Large" FullWidth="true" Text="@Text("Register")" />
                <LinovativeGap />
                <LinovativeButton Variant="LinoVariant.Text" Size="LinoSize.Large" FullWidth="true" Text="@Text("Login")" />
            </MudItem>


        </MudGrid>
    </div>

</MudForm>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1 = default!;
    MudForm form = default!;
    private RegisterNewCompanyDto dto = new();
    protected override string LocalizerKey => nameof(CompanyRegisterPage);

    private IEnumerable<string> PasswordStrength(string pw)
    {

        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }

        if (pw.Length < 8)
            yield return "Password must be at least of length 8";

        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";

        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";

        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string? PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";

        return null;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
}