@using LinoVative.Shared.Dto.Sources
@using Linovative.Frontend.Services.FrontendServices
@inherits SearchableDropdownBase<CurrencyDto>

@inject ICurrencyService _service
@inject IApplicationState _state

<SearchableDropdown Required=@Required
                    RequiredError=@RequiredError
                    Immediate=true
                    Label=@Label
                    Value=@Value
                    Text=@text
                    TextChanged="@(x => text = x)"
                    ValueChanged=@ValueChanged
                    StringConvert="@((x) => $"{x.Name}")"
                    PageSize=@PageSize
                    Clearable="@Clearable"
                    TItem="CurrencyDto"
                    SearchFunction="LoadData" />

@code {
    private CancellationTokenSource cts { get; set; } = new();
    string text = "";
    protected override Task OnInitializedAsync()
    {
        _state.OnChange += StateHasChanged;
        Label = Label is null ? "Currency" : Label;
        PageSize = PageSize == 0 ? 10 : PageSize;
        return base.OnInitializedAsync();
    }

    async Task<Response<List<CurrencyDto>>> LoadData(string? keyword, int page)
    {
        var odataFilter = new ODataFilter()
            {
                PageNumber = page,
                PageSize = PageSize,
                SortDirection = ShortDirections.Asc,
                OrderFiled = nameof(CurrencyDto.Name),
                FilterPayload = new { searchkeyword = keyword }
            };

        var result = await _service.Get(odataFilter, cts.Token);
        if (!result) return new();

        return result;
    }

}
